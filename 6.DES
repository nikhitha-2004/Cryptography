#include <stdio.h>
#include <string.h>
#include <ctype.h>

void encryptVigenere(char plaintext[], char key[]);
void decryptVigenere(char ciphertext[], char key[]);

int main() {
    char plaintext[100], key[100], ciphertext[100];

    // Get the plaintext and key from the user
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);

    // Remove newline characters from input
    strtok(plaintext, "\n");
    strtok(key, "\n");

    // Encrypt and display the result
    encryptVigenere(plaintext, key);
    printf("Encrypted text: %s\n", plaintext);

    // Decrypt and display the result
    decryptVigenere(plaintext, key);
    printf("Decrypted text: %s\n", plaintext);

    return 0;
}

void encryptVigenere(char plaintext[], char key[]) {
    int plainLen = strlen(plaintext);
    int keyLen = strlen(key);

    for (int i = 0; i < plainLen; i++) {
        if (isalpha(plaintext[i])) {
            // Adjust the key index based on the current character
            int keyIndex = i % keyLen;

            // Apply the Vigenere cipher to each character
            if (isupper(plaintext[i])) {
                plaintext[i] = 'A' + (plaintext[i] - 'A' + key[keyIndex] - 'A') % 26;
            } else {
                plaintext[i] = 'a' + (plaintext[i] - 'a' + key[keyIndex] - 'a') % 26;
            }
        }
    }
}

void decryptVigenere(char ciphertext[], char key[]) {
    int cipherLen = strlen(ciphertext);
    int keyLen = strlen(key);

    for (int i = 0; i < cipherLen; i++) {
        if (isalpha(ciphertext[i])) {
            // Adjust the key index based on the current character
            int keyIndex = i % keyLen;

            // Apply the Vigenere cipher to each character
            if (isupper(ciphertext[i])) {
                ciphertext[i] = 'A' + (ciphertext[i] - key[keyIndex] + 26) % 26;
            } else {
                ciphertext[i] = 'a' + (ciphertext[i] - key[keyIndex] + 26) % 26;
            }
        }
    }
}
